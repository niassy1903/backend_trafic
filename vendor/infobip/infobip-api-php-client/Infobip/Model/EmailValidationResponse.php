<?php
/**
 * EmailValidationResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Infobip
 * @author   Infobip Support
 * @link     https://www.infobip.com
 */

/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Infobip\Model;

use ArrayAccess;
use Infobip\ObjectSerializer;

/**
 * EmailValidationResponse Class Doc Comment
 *
 * @category Class
 * @package  Infobip
 * @author   Infobip Support
 * @link     https://www.infobip.com
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EmailValidationResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailValidationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'to' => 'string',
        'validMailbox' => 'string',
        'validSyntax' => 'bool',
        'catchAll' => 'bool',
        'didYouMean' => 'string',
        'disposable' => 'bool',
        'roleBased' => 'bool',
        'reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'to' => null,
        'validMailbox' => null,
        'validSyntax' => null,
        'catchAll' => null,
        'didYouMean' => null,
        'disposable' => null,
        'roleBased' => null,
        'reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'to' => 'to',
        'validMailbox' => 'validMailbox',
        'validSyntax' => 'validSyntax',
        'catchAll' => 'catchAll',
        'didYouMean' => 'didYouMean',
        'disposable' => 'disposable',
        'roleBased' => 'roleBased',
        'reason' => 'reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'to' => 'setTo',
        'validMailbox' => 'setValidMailbox',
        'validSyntax' => 'setValidSyntax',
        'catchAll' => 'setCatchAll',
        'didYouMean' => 'setDidYouMean',
        'disposable' => 'setDisposable',
        'roleBased' => 'setRoleBased',
        'reason' => 'setReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'to' => 'getTo',
        'validMailbox' => 'getValidMailbox',
        'validSyntax' => 'getValidSyntax',
        'catchAll' => 'getCatchAll',
        'didYouMean' => 'getDidYouMean',
        'disposable' => 'getDisposable',
        'roleBased' => 'getRoleBased',
        'reason' => 'getReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['to'] = $data['to'] ?? null;
        $this->container['validMailbox'] = $data['validMailbox'] ?? null;
        $this->container['validSyntax'] = $data['validSyntax'] ?? null;
        $this->container['catchAll'] = $data['catchAll'] ?? null;
        $this->container['didYouMean'] = $data['didYouMean'] ?? null;
        $this->container['disposable'] = $data['disposable'] ?? null;
        $this->container['roleBased'] = $data['roleBased'] ?? null;
        $this->container['reason'] = $data['reason'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to Email address of the recipient.
     *
     * @return self
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets validMailbox
     *
     * @return string|null
     */
    public function getValidMailbox()
    {
        return $this->container['validMailbox'];
    }

    /**
     * Sets validMailbox
     *
     * @param string|null $validMailbox Represents status of recipient email address.
     *
     * @return self
     */
    public function setValidMailbox($validMailbox)
    {
        $this->container['validMailbox'] = $validMailbox;

        return $this;
    }

    /**
     * Gets validSyntax
     *
     * @return bool|null
     */
    public function getValidSyntax()
    {
        return $this->container['validSyntax'];
    }

    /**
     * Sets validSyntax
     *
     * @param bool|null $validSyntax Represents syntax of recipient email address.
     *
     * @return self
     */
    public function setValidSyntax($validSyntax)
    {
        $this->container['validSyntax'] = $validSyntax;

        return $this;
    }

    /**
     * Gets catchAll
     *
     * @return bool|null
     */
    public function getCatchAll()
    {
        return $this->container['catchAll'];
    }

    /**
     * Sets catchAll
     *
     * @param bool|null $catchAll Denotes catch all status of recipient email address.
     *
     * @return self
     */
    public function setCatchAll($catchAll)
    {
        $this->container['catchAll'] = $catchAll;

        return $this;
    }

    /**
     * Gets didYouMean
     *
     * @return string|null
     */
    public function getDidYouMean()
    {
        return $this->container['didYouMean'];
    }

    /**
     * Sets didYouMean
     *
     * @param string|null $didYouMean Suggests alternate addresses that maybe valid.
     *
     * @return self
     */
    public function setDidYouMean($didYouMean)
    {
        $this->container['didYouMean'] = $didYouMean;

        return $this;
    }

    /**
     * Gets disposable
     *
     * @return bool|null
     */
    public function getDisposable()
    {
        return $this->container['disposable'];
    }

    /**
     * Sets disposable
     *
     * @param bool|null $disposable disposable
     *
     * @return self
     */
    public function setDisposable($disposable)
    {
        $this->container['disposable'] = $disposable;

        return $this;
    }

    /**
     * Gets roleBased
     *
     * @return bool|null
     */
    public function getRoleBased()
    {
        return $this->container['roleBased'];
    }

    /**
     * Sets roleBased
     *
     * @param bool|null $roleBased roleBased
     *
     * @return self
     */
    public function setRoleBased($roleBased)
    {
        $this->container['roleBased'] = $roleBased;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Reason is provided when validMailbox status is unknown. 1. INBOX_FULL - The user quota exceeded / The user inbox is full / The user doesn't accept any more requests.  2. UNEXPECTED_FAILURE - The mail Server returned a temporary error. 3. THROTTLED - The mail server is not allowing us momentarily because of too many requests. 4. TIMED_OUT - The Mail Server took a longer time to respond / there was a delay in the network. 5. TEMP_REJECTION - Mail server temporarily rejected. 6. UNABLE_TO_CONNECT - Unable to connect to the Mail Server.
     *
     * @return self
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
